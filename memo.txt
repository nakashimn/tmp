[方針]

* WebViewを利用する
* 動画を再生するときのみWingnetPlayerをアプリ内部で起動する


[情報の取得方法]

* ID：WebPage内のHTMLソースから取得(以前と変わらない)
* コンテンツのURL：WebViewClient内のshouldOverrideUrlLoading()でロードしたURLを取得
* コンテンツ再生フラグ：コンテンツのURLが"com.wingnetweb.wns.player:stream:"で始まっている場合、コンテンツが再生されていると判定
    * 動画停止後にコンテンツ再生フラグをOFFにする方法は要検討…


[実装]

* WingnetPlayerの起動 下記をWebViewClientに記載してリンククリック時の動作をOverrideする
```
@Override
public boolean shouldOverrideUrlLoading(WebView view, WebResourceRequest request) {
  String url = String.valueOf(request.getUrl());
  // get_url(url);
  Log.d(TAG, String.format(Locale.getDefault(), "WebViewClient LinkURL: %s", url));
  if (url.startsWith("com.wingnetweb.wns.player:stream:")) {
    // start WingnetPlayer
    Uri uri = Uri.parse(url);
    Intent intent = new Intent(Intent.ACTION_VIEW, uri);
    startActivity(intent);
    // toggle_playing_movie_flag(true);
    return true;  // cancel the current load.
  }
  // toggle_playing_mobvie_flag(false);
  return false;
}
```
* コンテンツのURL取得 get_url()でWebViewClient内のメンバ変数mCurrentUrlを更新
* コンテンツ再生フラグの取得 toggle_playing_movie_flag()でWebViewClient内のメンバ変数mMoviePlayingを切替
  上記手法で切替可能かは不明…


[動画再生用リンククリック時のふるまい]

* ディープリンク(https://wacul-ai.com/blog/site-improvement/method/deeplink/)を利用している
* 動画再生用リンククリック時、URL(com.wingnetweb.wns.player:stream:http://~~)がアプリに渡される
    * com.wingnetweb.wns.playerを起動してhttp://~~を再生…といった指示が来ているらしい…
    * WebViewでのディープリンクの処理は自前で実装する必要がある
* リンク先URLにcom.wingnetweb.wns.playerがURLの頭に含まれる場合Intentを利用してWingnetPlayerをアプリ内で起動する


[確認事項]

* 動画再生時にWingnetPlayerが起動するか
* 動画再生中に集中度推定機能が動作しているか
    * 機能していない場合は集中度推定機能をバックグラウンドで実行する必要がある…?(IntentServiceで起動する?)
* IDは取得できるか
* コンテンツURLは取得できるか
* 動画再生/停止に合わせてコンテンツ再生フラグが正しく切り替わっているか
